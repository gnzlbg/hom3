#ifndef GRID_CELLVERTICES_HPP_
#define GRID_CELLVERTICES_HPP_
////////////////////////////////////////////////////////////////////////////////
/// Includes:
#include "../globals.hpp"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
namespace grid {
////////////////////////////////////////////////////////////////////////////////

template<SInd nd> struct CellVertices {
  static constexpr SInd no_vertices() {  /// \todo refactor! (see grid)
    return math::ct::ipow(2u,nd);
  }

  using Vertex = NumA<nd>;
  using Vertices = std::array<Vertex,no_vertices()>;

  Ind cell_id() const { return cellId_; }
  Vertices operator()() const { return vertices_; }

  Ind cellId_;
  Vertices vertices_;
};

template<SInd nd>
using CellVerticesRange
= boost::transformed_range<std::function<grid::CellVertices<nd> (Ind)>, const  AnyRange<Ind>>;

////////////////////////////////////////////////////////////////////////////////
} // namespace grid
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
#endif
